<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}DetailRepository;
use App\Exceptions\Custom\DataNotFoundException;

use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}DetailBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DetailBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}DetailRepositorySpy = Mockery::spy({{domainCaps}}DetailRepository::class);

        ${{domain}}DetailBusiness = new {{domainCaps}}DetailBusiness(${{domain}}DetailRepositorySpy);

        $this->assertInstanceOf({{domainCaps}}DetailBusiness::class, ${{domain}}DetailBusiness);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DetailBusiness::process
     */
    public function testProcess()
    {
        $id = '5493268a-8960-4d04-96a0-50e0ae46f9a8';
        $data = [
            'id' => $id,
            'field' => 'teste',
        ];

        ${{domain}}DetailRepositoryMock = Mockery::mock({{domainCaps}}DetailRepository::class)
            ->shouldReceive('getById')
            ->with($id)
            ->andReturn((object) $data)
            ->getMock();

        ${{domain}}DetailBusiness = new {{domainCaps}}DetailBusiness(${{domain}}DetailRepositoryMock);

        $process = ${{domain}}DetailBusiness->process($id);

        $this->assertEquals((object) $data, $process);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DetailBusiness::process
     */
    public function testProcessAndNotFound()
    {
        $id = '5493268a-8960-4d04-96a0-50e0ae46f9a8';

        ${{domain}}DetailRepositoryMock = Mockery::mock({{domainCaps}}DetailRepository::class)
            ->shouldReceive('getById')
            ->with($id)
            ->andReturn(null)
            ->getMock();

        ${{domain}}DetailBusiness = new {{domainCaps}}DetailBusiness(${{domain}}DetailRepositoryMock);

        $this->expectExceptionObject(new DataNotFoundException('Data not found', 404));

        $process = ${{domain}}DetailBusiness->process($id);
    }

    public function tearDown(): void
    {
        Mockery::close();
    }
}

<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}DeadDetailRepository;
use App\Exceptions\Custom\DataNotFoundException;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}DeadDetailBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}DeadDetailRepositorySpy = Mockery::spy({{domainCaps}}DeadDetailRepository::class);

        ${{domain}}DeadDetailBusiness = new {{domainCaps}}DeadDetailBusiness(
            ${{domain}}DeadDetailRepositorySpy
        );

        $this->assertInstanceOf({{domainCaps}}DeadDetailBusiness::class, ${{domain}}DeadDetailBusiness);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::process
     */
    public function testProcess()
    {
        $id = '5493268a-8960-4d04-96a0-50e0ae46f9a8';
        $data = [
            'id' => $id,
            'field' => 'teste',
        ];

        ${{domain}}DeadDetailRepositoryMock = Mockery::mock({{domainCaps}}DeadDetailRepository::class)
            ->shouldReceive('getDeadById')
            ->with($id)
            ->andReturn((object) $data)
            ->getMock();

        ${{domain}}DeadDetailBusiness = new {{domainCaps}}DeadDetailBusiness(
            ${{domain}}DeadDetailRepositoryMock
        );

        $process = ${{domain}}DeadDetailBusiness->process($id);

        $this->assertEquals((object) $data, $process);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::process
     */
    public function testProcessAndNotFound()
    {
        $id = '5493268a-8960-4d04-96a0-50e0ae46f9a8';

        ${{domain}}DeadDetailRepositoryMock = Mockery::mock({{domainCaps}}DeadDetailRepository::class)
            ->shouldReceive('getDeadById')
            ->with($id)
            ->andReturn(null)
            ->getMock();

        ${{domain}}DeadDetailBusiness = new {{domainCaps}}DeadDetailBusiness(
            ${{domain}}DeadDetailRepositoryMock
        );

        $this->expectExceptionObject(new DataNotFoundException('Data not found', 404));

        $process = ${{domain}}DeadDetailBusiness->process($id);
    }

    public function tearDown(): void
    {
        Mockery::close();
    }
}

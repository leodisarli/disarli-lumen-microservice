<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}ListRepository;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}ListBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}ListRepositorySpy = Mockery::spy({{domainCaps}}ListRepository::class);

        ${{domain}}ListBusiness = new {{domainCaps}}ListBusiness(${{domain}}ListRepositorySpy);

        $this->assertInstanceOf({{domainCaps}}ListBusiness::class, ${{domain}}ListBusiness);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::process
     */
    public function testProcess()
    {
        $data = [
            'id' => '5493268a-8960-4d04-96a0-50e0ae46f9a8',
            'field' => 'teste',
        ];

        ${{domain}}ListRepositorySpy = Mockery::spy({{domainCaps}}ListRepository::class)
            ->shouldReceive('getList')
            ->withAnyArgs()
            ->andReturn($data)
            ->getMock();

        ${{domain}}ListBusiness = new {{domainCaps}}ListBusiness(${{domain}}ListRepositorySpy);
        $process = ${{domain}}ListBusiness->process(
            ['id', 'field'],
            '',
            '',
            null,
            []
        );

        $this->assertEquals($data, $process);
    }

    public function tearDown()
    {
        Mockery::close();
    }
}

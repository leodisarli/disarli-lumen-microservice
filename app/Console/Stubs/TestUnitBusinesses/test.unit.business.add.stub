<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}AddRepository;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}AddBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}AddRepositorySpy = Mockery::spy({{domainCaps}}AddRepository::class);

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(${{domain}}AddRepositorySpy);

        $this->assertInstanceOf({{domainCaps}}AddBusiness::class, ${{domain}}AddBusiness);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::process
     */
    public function testProcess()
    {
        $id = '5493268a-8960-4d04-96a0-50e0ae46f9a8';
        $data = [
            'field' => 'teste',
        ];

        ${{domain}}AddRepositoryMock = Mockery::mock({{domainCaps}}AddRepository::class)
            ->shouldReceive('insert')
            ->with($data)
            ->andReturn($id)
            ->shouldReceive('getById')
            ->with($id)
            ->andReturn((object) $data)
            ->getMock();

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(${{domain}}AddRepositoryMock);

        $process = ${{domain}}AddBusiness->process($data);

        $this->assertEquals((object) $data, $process);
    }

    public function tearDown()
    {
        Mockery::close();
    }
}
